// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core business entities for Company Secretary ERP
model Company {
  id              String   @id @default(uuid())
  name            String
  email           String   @unique
  phone           String?
  address         String?
  gstin           String?  @unique
  stateCode       String?
  website         String?
  logo            String?

  // Audit fields
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  users           User[]
  customers       Customer[]
  invoices        Invoice[]
  payments        Payment[]
  services        ServiceTemplate[]
  recurringContracts RecurringContract[]
  complianceItems ComplianceItem[]
  complianceTemplates ComplianceTemplate[]
  complianceAlerts ComplianceAlert[]
  documents       Document[]
  invoiceGroups   InvoiceGroup[]

  // Communication system relations
  settings        CompanySettings?
  communicationLogs CommunicationLog[]
  messageTemplates  MessageTemplate[]

  @@map("companies")
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique
  name            String?
  role            UserRole @default(USER)
  companyId       String

  // Audit fields
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("users")
}

model Customer {
  id              String   @id @default(uuid())
  name            String
  email           String?
  phone           String?
  address         String?
  gstin           String?
  stateCode       String?
  companyId       String

  // Business fields
  creditLimit     Float?   @default(0)
  creditDays      Int?     @default(30)

  // Communication fields
  whatsappNumber     String?
  preferredLanguage  String? @default("en")
  timezone          String? @default("Asia/Kolkata")

  // CS Practice Comprehensive Fields
  pan                String?  // PAN Number
  cin                String?  // Corporate Identification Number
  din                String?  // Director Identification Number (comma-separated if multiple)
  incorporationDate  DateTime?
  industry           String?  // Industry/sector
  contactPerson      String?  // Primary contact person name
  designation        String?  // Contact person designation
  companyType        String?  // Private Limited, Public Limited, LLP, etc.
  registeredOffice   String?  // Full registered office address
  website            String?

  // Audit fields
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  invoices        Invoice[]
  payments        Payment[]
  recurringContracts RecurringContract[]
  communications  Communication[]
  complianceItems ComplianceItem[]
  documents       Document[]
  invoiceGroups   InvoiceGroup[]

  // Communication system relations
  communicationPreferences CommunicationPreference[]
  communicationLogs        CommunicationLog[]

  // Performance indexes
  @@index([companyId, createdAt])
  @@index([companyId])

  @@map("customers")
}

model ServiceTemplate {
  id              String   @id @default(uuid())
  name            String
  description     String?
  defaultRate     Float
  gstRate         Float    @default(18)
  hsnSac          String?
  category        String?
  companyId       String

  // Custom fields for specialized CS services
  customFields    Json?    // Array of field definitions for dynamic form rendering
  // Example: [
  //   { name: "cin", label: "CIN", type: "text", required: true },
  //   { name: "registrationDate", label: "Registration Date", type: "date", required: true }
  // ]

  // Audit fields
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  company           Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  invoiceLines      InvoiceLine[]
  recurringContracts RecurringContract[]

  @@map("service_templates")
}

model Invoice {
  id              String        @id @default(uuid())
  number          String        @unique
  status          InvoiceStatus @default(DRAFT)
  issueDate       DateTime
  dueDate         DateTime?
  customerId      String
  companyId       String

  // Financial fields
  subtotal        Float         @default(0)
  cgstAmount      Float         @default(0)
  sgstAmount      Float         @default(0)
  igstAmount      Float         @default(0)
  totalTax        Float         @default(0)
  grandTotal      Float         @default(0)
  paidAmount      Float         @default(0)

  // Additional fields
  placeOfSupply   String?
  notes           String?
  terms           String?

  // Audit fields
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  company         Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customer        Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  lines           InvoiceLine[]
  payments        Payment[]
  attachments     InvoiceAttachment[]
  invoiceGroupId  String?
  invoiceGroup    InvoiceGroup? @relation(fields: [invoiceGroupId], references: [id])

  // Performance indexes
  @@index([companyId, issueDate])
  @@index([companyId, status])
  @@index([companyId, dueDate])
  @@index([customerId])

  @@map("invoices")
}

model InvoiceAttachment {
  id            String   @id @default(uuid())

  // Relations
  invoiceId     String
  invoice       Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  // File metadata
  fileName      String   // Original filename (e.g., "MCA_G.A.R.7_Receipt.pdf")
  fileSize      Int      // Size in bytes
  fileType      String   // MIME type (e.g., "application/pdf")
  storagePath   String   // Supabase storage path
  storageUrl    String   // Public/signed URL

  // Ordering & display
  displayOrder  Int      @default(0)
  description   String?  // Optional description (e.g., "MCA G.A.R.7 Receipt - June 2024")

  // Audit
  uploadedAt    DateTime @default(now())
  uploadedBy    String?  // User ID who uploaded

  @@index([invoiceId])
  @@index([uploadedAt])
  @@map("invoice_attachments")
}

model InvoiceLine {
  id              String   @id @default(uuid())
  invoiceId       String
  description     String
  quantity        Float
  rate            Float
  amount          Float
  gstRate         Float    @default(18)
  hsnSac          String?
  isReimbursement Boolean  @default(false)
  serviceTemplateId String?

  // Custom field values for specialized services
  customFieldData Json?    // Object with field values matching template's customFields
  // Example: {
  //   "cin": "U12345KA2020PTC123456",
  //   "registrationDate": "2020-05-15"
  // }

  // Relations
  invoice         Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  serviceTemplate ServiceTemplate? @relation(fields: [serviceTemplateId], references: [id])

  @@map("invoice_lines")
}

model Payment {
  id              String        @id @default(uuid())
  invoiceId       String
  customerId      String
  companyId       String
  amount          Float
  paymentDate     DateTime
  method          PaymentMethod
  reference       String?
  notes           String?
  status          PaymentStatus @default(COMPLETED)

  // Audit fields
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  company         Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customer        Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  invoice         Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  // Performance indexes
  @@index([companyId, paymentDate])
  @@index([customerId])
  @@index([invoiceId])

  @@map("payments")
}

model InvoiceGroup {
  id              String   @id @default(uuid())
  companyId       String
  customerId      String?  // Optional - can group invoices across customers

  // Group metadata
  name            String   // e.g., "Q1 2024 Consolidated Invoice"
  description     String?
  groupType       String   @default("QUARTERLY") // QUARTERLY, MONTHLY, CUSTOM
  periodStart     DateTime?
  periodEnd       DateTime?

  // Financial summary
  totalAmount     Float    @default(0)
  invoiceCount    Int      @default(0)

  // Audit
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String?

  // Relations
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customer        Customer? @relation(fields: [customerId], references: [id])
  invoices        Invoice[]

  @@index([companyId, createdAt])
  @@index([customerId])
  @@map("invoice_groups")
}

model RecurringContract {
  id                String          @id @default(uuid())
  customerId        String
  serviceTemplateId String?
  companyId         String

  // Contract details - matching our recurring engine
  description       String
  terms             String?
  notes             String?

  // Financial terms
  amount            Float
  frequency         BillingFrequency
  escalationRate    Float           @default(0)
  autoInvoice       Boolean         @default(true)

  // Dates
  startDate         DateTime
  endDate           DateTime?
  nextBillingDate   DateTime
  lastBilledDate    DateTime?

  // Status and tracking
  status            ContractStatus  @default(ACTIVE)
  totalBilled       Float           @default(0)

  // Audit fields
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relations
  company           Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customer          Customer        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  serviceTemplate   ServiceTemplate? @relation(fields: [serviceTemplateId], references: [id])

  @@map("recurring_contracts")
}

model ComplianceItem {
  id              String   @id @default(uuid())
  companyId       String
  customerId      String?
  title           String
  description     String?
  dueDate         DateTime
  completedDate   DateTime?
  status          ComplianceStatus @default(PENDING)
  priority        Priority @default(MEDIUM)
  category        ComplianceCategory

  // Enhanced tracking fields
  complianceType  ComplianceType
  frequency       ComplianceFrequency?
  nextDueDate     DateTime?
  assignedTo      String?
  reminderDays    Int @default(7)
  isRecurring     Boolean @default(false)

  // Financial tracking
  estimatedCost   Float? @default(0)
  actualCost      Float? @default(0)

  // ROC specific fields
  rocForm         String?
  rocSection      String?
  applicableAct   String?
  penalty         Float?

  // Completion tracking
  completionNotes String?
  attachments     String[] @default([])

  // Audit fields
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customer        Customer? @relation(fields: [customerId], references: [id])
  template        ComplianceTemplate? @relation(fields: [templateId], references: [id])
  templateId      String?
  activities      ComplianceActivity[]

  // Performance indexes
  @@index([companyId, status, dueDate])
  @@index([companyId, dueDate])
  @@index([customerId])

  @@map("compliance_items")
}

model ComplianceTemplate {
  id              String   @id @default(uuid())
  companyId       String
  title           String
  description     String?
  complianceType  ComplianceType
  category        ComplianceCategory
  frequency       ComplianceFrequency
  defaultDays     Int @default(30) // How many days before due date to create
  reminderDays    Int @default(7)

  // ROC specific template fields
  rocForm         String?
  rocSection      String?
  applicableAct   String?

  // Financial
  estimatedCost   Float? @default(0)

  // Template content
  instructions    String?
  checklist       String[]  @default([])
  requiredDocs    String[]  @default([])

  isActive        Boolean  @default(true)

  // Audit fields
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  items           ComplianceItem[]

  @@map("compliance_templates")
}

model ComplianceActivity {
  id              String   @id @default(uuid())
  complianceId    String
  activityType    ActivityType
  description     String
  performedBy     String?
  activityDate    DateTime @default(now())

  // File attachments
  attachments     String[]  @default([])

  // Audit fields
  createdAt       DateTime @default(now())

  // Relations
  compliance      ComplianceItem @relation(fields: [complianceId], references: [id], onDelete: Cascade)

  @@map("compliance_activities")
}

model ComplianceAlert {
  id              String   @id @default(uuid())
  companyId       String
  complianceId    String
  alertType       AlertType
  message         String
  isRead          Boolean  @default(false)
  sentAt          DateTime
  scheduledFor    DateTime?

  // Alert settings
  reminderDays    Int
  escalationLevel Int @default(1)

  // Audit fields
  createdAt       DateTime @default(now())

  // Relations
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("compliance_alerts")
}

model Document {
  id              String   @id @default(uuid())
  companyId       String
  customerId      String?
  filename        String
  originalName    String
  mimeType        String
  size            Int
  category        DocumentCategory
  description     String?

  // File storage
  path            String

  // Audit fields
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customer        Customer? @relation(fields: [customerId], references: [id])

  @@map("documents")
}

model Communication {
  id              String   @id @default(uuid())
  customerId      String
  type            CommunicationType
  subject         String?
  content         String
  sentAt          DateTime

  // Audit fields
  createdAt       DateTime @default(now())

  // Relations
  customer        Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("communications")
}

// Enums
enum UserRole {
  ADMIN
  USER
  VIEWER
}

enum InvoiceStatus {
  DRAFT
  GENERATED
  SENT
  PAID
  PARTIALLY_PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CHEQUE
  UPI
  CARD
  DIGITAL_WALLET
  CRYPTOCURRENCY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum BillingFrequency {
  MONTHLY
  QUARTERLY
  HALF_YEARLY
  ANNUALLY
}

enum ContractStatus {
  ACTIVE
  PAUSED
  EXPIRED
  CANCELLED
}

enum ComplianceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum DocumentCategory {
  INVOICE
  AGREEMENT
  COMPLIANCE
  FINANCIAL
  OTHER
}

enum CommunicationType {
  EMAIL
  PHONE
  WHATSAPP
  MEETING
}

enum ComplianceType {
  ROC_FILING
  BOARD_MEETING
  AGM
  EGM
  AUDIT
  TAX_FILING
  REGULATORY
  STATUTORY
  PERIODIC
  ONE_TIME
}

enum ComplianceCategory {
  CORPORATE_GOVERNANCE
  REGULATORY_COMPLIANCE
  TAX_COMPLIANCE
  AUDIT_COMPLIANCE
  BOARD_MATTERS
  SHAREHOLDER_MATTERS
  SECRETARIAL_COMPLIANCE
  ANNUAL_COMPLIANCE
  QUARTERLY_COMPLIANCE
  MONTHLY_COMPLIANCE
}

enum ComplianceFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  HALF_YEARLY
  ANNUALLY
  BI_ANNUALLY
  ON_DEMAND
}

enum ActivityType {
  CREATED
  UPDATED
  COMPLETED
  POSTPONED
  ESCALATED
  ASSIGNED
  DOCUMENT_UPLOADED
  REMINDER_SENT
  COMMENT_ADDED
  STATUS_CHANGED
}

enum AlertType {
  UPCOMING_DEADLINE
  OVERDUE_ITEM
  CRITICAL_ALERT
  REMINDER
  ESCALATION
  COMPLETION_REQUIRED
}

// ====== COMMUNICATION SYSTEM MODELS ======

model CompanySettings {
  id              String   @id @default(uuid())
  companyId       String   @unique

  // Email Configuration
  emailProvider   EmailProvider?
  smtpHost        String?
  smtpPort        Int?
  smtpUser        String? // Encrypted
  smtpPassword    String? // Encrypted
  fromEmail       String?
  fromName        String?
  emailEnabled    Boolean @default(false)

  // WhatsApp Configuration
  whatsappProvider WhatsAppProvider?
  whatsappApiKey   String? // Encrypted
  whatsappPhoneId  String?
  whatsappEnabled  Boolean @default(false)

  // Default Templates
  defaultEmailTemplate    String?
  defaultWhatsAppTemplate String?

  // Settings
  autoSendInvoices        Boolean @default(true)
  complianceReminderDays  Int     @default(7)
  paymentReminderDays     Int     @default(3)

  // Audit fields
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_settings")
}

model CommunicationPreference {
  id              String   @id @default(uuid())
  customerId      String   @unique

  // Client Communication Preferences
  emailOptIn      Boolean  @default(false)
  whatsappOptIn   Boolean  @default(false)
  smsOptIn        Boolean  @default(false)

  // Preferred channels for different types
  invoiceDelivery    CommunicationChannel @default(EMAIL)
  complianceReminders CommunicationChannel @default(EMAIL)
  paymentReminders   CommunicationChannel @default(EMAIL)
  generalUpdates     CommunicationChannel @default(EMAIL)

  // Frequency preferences
  reminderFrequency  ReminderFrequency @default(WEEKLY)
  quietHoursStart    String? @default("22:00")
  quietHoursEnd      String? @default("09:00")

  // Language and timezone
  language           String @default("en")
  timezone           String @default("Asia/Kolkata")

  // Audit fields
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  customer        Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("communication_preferences")
}

model CommunicationLog {
  id              String   @id @default(uuid())
  customerId      String
  companyId       String

  // Communication details
  type            MessageType
  channel         CommunicationChannel
  subject         String?
  content         String
  templateUsed    String?

  // Delivery tracking
  status          DeliveryStatus @default(PENDING)
  providerId      String? // External provider message ID
  sentAt          DateTime?
  deliveredAt     DateTime?
  readAt          DateTime?
  responseAt      DateTime?

  // Error handling
  errorMessage    String?
  retryCount      Int @default(0)
  maxRetries      Int @default(3)

  // Metadata and cost tracking
  providerName    String?
  cost            Float? @default(0)
  metadata        Json?

  // Audit fields
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  customer        Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([customerId, createdAt])
  @@index([companyId, status])
  @@map("communication_logs")
}

model MessageTemplate {
  id              String   @id @default(uuid())
  companyId       String

  // Template details
  name            String
  type            MessageType
  channel         CommunicationChannel
  language        String   @default("en")

  // Content
  subject         String?
  htmlContent     String?
  textContent     String
  variables       String[] @default([])

  // Settings
  isActive        Boolean  @default(true)
  isDefault       Boolean  @default(false)

  // Audit fields
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, type, channel, isDefault])
  @@map("message_templates")
}

// Communication Enums
enum EmailProvider {
  SMTP
  SENDGRID
  RESEND
  MAILGUN
  AWS_SES
}

enum WhatsAppProvider {
  WHATSAPP_BUSINESS_API
  TWILIO
  MESSAGEBIRD
  GUPSHUP
}

enum CommunicationChannel {
  EMAIL
  WHATSAPP
  SMS
  VOICE
}

enum ReminderFrequency {
  DAILY
  WEEKLY
  BI_WEEKLY
  MONTHLY
  CUSTOM
}

enum DeliveryStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
  BOUNCED
  PARTIALLY_FAILED
}

enum MessageType {
  INVOICE
  PAYMENT_REMINDER
  COMPLIANCE_REMINDER
  WELCOME
  GENERAL_UPDATE
  URGENT_NOTICE
  DOCUMENT_REQUEST
  THANK_YOU
}
