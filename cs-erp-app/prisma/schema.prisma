generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                  String               @id @default(uuid())
  name                String
  email               String               @unique
  phone               String?
  address             String?
  gstin               String?              @unique
  stateCode           String?
  pan                 String?
  website             String?
  logo                String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  communicationLogs   CommunicationLog[]
  settings            CompanySettings?
  complianceAlerts    ComplianceAlert[]
  complianceItems     ComplianceItem[]
  complianceTemplates ComplianceTemplate[]
  customers           Customer[]
  documents           Document[]
  invoiceGroups       InvoiceGroup[]
  invoices            Invoice[]
  messageTemplates    MessageTemplate[]
  payments            Payment[]
  recurringContracts  RecurringContract[]
  services            ServiceTemplate[]
  users               User[]

  @@map("companies")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  role      UserRole @default(USER)
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("users")
}

model Customer {
  id                       String                   @id @default(uuid())
  name                     String
  email                    String?
  phone                    String?
  address                  String?
  gstin                    String?
  stateCode                String?
  companyId                String
  creditLimit              Float?                   @default(0)
  creditDays               Int?                     @default(30)
  whatsappNumber           String?
  preferredLanguage        String?                  @default("en")
  timezone                 String?                  @default("Asia/Kolkata")
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
  cin                      String?
  companyType              String?
  contactPerson            String?
  designation              String?
  din                      String?
  incorporationDate        DateTime?
  industry                 String?
  pan                      String?
  registeredOffice         String?
  website                  String?
  communicationLogs        CommunicationLog[]
  communicationPreferences CommunicationPreference?
  communications           Communication[]
  complianceItems          ComplianceItem[]
  company                  Company                  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  documents                Document[]
  invoiceGroups            InvoiceGroup[]
  invoices                 Invoice[]
  payments                 Payment[]
  recurringContracts       RecurringContract[]

  @@index([companyId, createdAt])
  @@index([companyId])
  @@map("customers")
}

model ServiceTemplate {
  id                 String              @id @default(uuid())
  name               String
  description        String?
  defaultRate        Float
  gstRate            Float               @default(18)
  hsnSac             String?
  category           String?
  companyId          String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  customFields       Json?
  invoiceLines       InvoiceLine[]
  recurringContracts RecurringContract[]
  company            Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("service_templates")
}

model Invoice {
  id             String              @id @default(uuid())
  number         String              @unique
  status         InvoiceStatus       @default(DRAFT)
  issueDate      DateTime
  dueDate        DateTime?
  customerId     String
  companyId      String
  subtotal       Float               @default(0)
  cgstAmount     Float               @default(0)
  sgstAmount     Float               @default(0)
  igstAmount     Float               @default(0)
  totalTax       Float               @default(0)
  grandTotal     Float               @default(0)
  paidAmount     Float               @default(0)
  placeOfSupply  String?
  notes          String?
  terms          String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  invoiceGroupId String?
  attachments    InvoiceAttachment[]
  lines          InvoiceLine[]
  company        Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customer       Customer            @relation(fields: [customerId], references: [id], onDelete: Cascade)
  invoiceGroup   InvoiceGroup?       @relation(fields: [invoiceGroupId], references: [id])
  payments       Payment[]

  @@index([companyId, issueDate])
  @@index([companyId, status])
  @@index([companyId, dueDate])
  @@index([customerId])
  @@map("invoices")
}

model InvoiceAttachment {
  id           String   @id @default(uuid())
  invoiceId    String
  fileName     String
  fileSize     Int
  fileType     String
  storagePath  String
  storageUrl   String
  displayOrder Int      @default(0)
  description  String?
  uploadedAt   DateTime @default(now())
  uploadedBy   String?
  invoice      Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
  @@index([uploadedAt])
  @@map("invoice_attachments")
}

model InvoiceLine {
  id                String           @id @default(uuid())
  invoiceId         String
  description       String
  quantity          Float
  rate              Float
  amount            Float
  gstRate           Float            @default(18)
  hsnSac            String?
  isReimbursement   Boolean          @default(false)
  serviceTemplateId String?
  customFieldData   Json?

  // Custom Service Columns Support
  serviceType       String?          // ROC_FILING, SECRETARIAL_AUDIT, BOARD_MEETING, etc.
  serviceData       Json?            // Flexible storage for service-specific columns

  invoice           Invoice          @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  serviceTemplate   ServiceTemplate? @relation(fields: [serviceTemplateId], references: [id])

  @@map("invoice_lines")
}

model Payment {
  id          String        @id @default(uuid())
  invoiceId   String
  customerId  String
  companyId   String
  amount      Float
  paymentDate DateTime
  method      PaymentMethod
  reference   String?
  notes       String?
  status      PaymentStatus @default(COMPLETED)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  company     Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customer    Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  invoice     Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([companyId, paymentDate])
  @@index([customerId])
  @@index([invoiceId])
  @@map("payments")
}

model InvoiceGroup {
  id           String    @id @default(uuid())
  companyId    String
  customerId   String?
  name         String
  description  String?
  groupType    String    @default("QUARTERLY")
  periodStart  DateTime?
  periodEnd    DateTime?
  totalAmount  Float     @default(0)
  invoiceCount Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  createdBy    String?
  company      Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customer     Customer? @relation(fields: [customerId], references: [id])
  invoices     Invoice[]

  @@index([companyId, createdAt])
  @@index([customerId])
  @@map("invoice_groups")
}

model RecurringContract {
  id                String           @id @default(uuid())
  customerId        String
  serviceTemplateId String?
  companyId         String
  description       String
  terms             String?
  notes             String?
  amount            Float
  frequency         BillingFrequency
  escalationRate    Float            @default(0)
  autoInvoice       Boolean          @default(true)
  startDate         DateTime
  endDate           DateTime?
  nextBillingDate   DateTime
  lastBilledDate    DateTime?
  status            ContractStatus   @default(ACTIVE)
  totalBilled       Float            @default(0)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  company           Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customer          Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  serviceTemplate   ServiceTemplate? @relation(fields: [serviceTemplateId], references: [id])

  @@map("recurring_contracts")
}

model ComplianceItem {
  id              String               @id @default(uuid())
  companyId       String
  customerId      String?
  title           String
  description     String?
  dueDate         DateTime
  completedDate   DateTime?
  status          ComplianceStatus     @default(PENDING)
  priority        Priority             @default(MEDIUM)
  category        ComplianceCategory
  complianceType  ComplianceType
  frequency       ComplianceFrequency?
  nextDueDate     DateTime?
  assignedTo      String?
  reminderDays    Int                  @default(7)
  isRecurring     Boolean              @default(false)
  estimatedCost   Float?               @default(0)
  actualCost      Float?               @default(0)
  rocForm         String?
  rocSection      String?
  applicableAct   String?
  penalty         Float?
  completionNotes String?
  attachments     String[]             @default([])
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  templateId      String?
  activities      ComplianceActivity[]
  company         Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customer        Customer?            @relation(fields: [customerId], references: [id])
  template        ComplianceTemplate?  @relation(fields: [templateId], references: [id])

  @@index([companyId, status, dueDate])
  @@index([companyId, dueDate])
  @@index([customerId])
  @@map("compliance_items")
}

model ComplianceTemplate {
  id             String              @id @default(uuid())
  companyId      String
  title          String
  description    String?
  complianceType ComplianceType
  category       ComplianceCategory
  frequency      ComplianceFrequency
  defaultDays    Int                 @default(30)
  reminderDays   Int                 @default(7)
  rocForm        String?
  rocSection     String?
  applicableAct  String?
  estimatedCost  Float?              @default(0)
  instructions   String?
  checklist      String[]            @default([])
  requiredDocs   String[]            @default([])
  isActive       Boolean             @default(true)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  items          ComplianceItem[]
  company        Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("compliance_templates")
}

model ComplianceActivity {
  id           String         @id @default(uuid())
  complianceId String
  activityType ActivityType
  description  String
  performedBy  String?
  activityDate DateTime       @default(now())
  attachments  String[]       @default([])
  createdAt    DateTime       @default(now())
  compliance   ComplianceItem @relation(fields: [complianceId], references: [id], onDelete: Cascade)

  @@map("compliance_activities")
}

model ComplianceAlert {
  id              String    @id @default(uuid())
  companyId       String
  complianceId    String
  alertType       AlertType
  message         String
  isRead          Boolean   @default(false)
  sentAt          DateTime
  scheduledFor    DateTime?
  reminderDays    Int
  escalationLevel Int       @default(1)
  createdAt       DateTime  @default(now())
  company         Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("compliance_alerts")
}

model Document {
  id           String           @id @default(uuid())
  companyId    String
  customerId   String?
  filename     String
  originalName String
  mimeType     String
  size         Int
  category     DocumentCategory
  description  String?
  path         String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  company      Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customer     Customer?        @relation(fields: [customerId], references: [id])

  @@map("documents")
}

model Communication {
  id         String            @id @default(uuid())
  customerId String
  type       CommunicationType
  subject    String?
  content    String
  sentAt     DateTime
  createdAt  DateTime          @default(now())
  customer   Customer          @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("communications")
}

model CompanySettings {
  id                      String            @id @default(uuid())
  companyId               String            @unique
  emailProvider           EmailProvider?
  smtpHost                String?
  smtpPort                Int?
  smtpUser                String?
  smtpPassword            String?
  fromEmail               String?
  fromName                String?
  emailEnabled            Boolean           @default(false)
  whatsappProvider        WhatsAppProvider?
  whatsappApiKey          String?
  whatsappPhoneId         String?
  whatsappEnabled         Boolean           @default(false)
  defaultEmailTemplate    String?
  defaultWhatsAppTemplate String?
  autoSendInvoices        Boolean           @default(true)
  complianceReminderDays  Int               @default(7)
  paymentReminderDays     Int               @default(3)
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  company                 Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_settings")
}

model CommunicationPreference {
  id                  String               @id @default(uuid())
  customerId          String               @unique
  emailOptIn          Boolean              @default(false)
  whatsappOptIn       Boolean              @default(false)
  smsOptIn            Boolean              @default(false)
  invoiceDelivery     CommunicationChannel @default(EMAIL)
  complianceReminders CommunicationChannel @default(EMAIL)
  paymentReminders    CommunicationChannel @default(EMAIL)
  generalUpdates      CommunicationChannel @default(EMAIL)
  reminderFrequency   ReminderFrequency    @default(WEEKLY)
  quietHoursStart     String?              @default("22:00")
  quietHoursEnd       String?              @default("09:00")
  language            String               @default("en")
  timezone            String               @default("Asia/Kolkata")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  customer            Customer             @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("communication_preferences")
}

model CommunicationLog {
  id           String               @id @default(uuid())
  customerId   String
  companyId    String
  type         MessageType
  channel      CommunicationChannel
  subject      String?
  content      String
  templateUsed String?
  status       DeliveryStatus       @default(PENDING)
  providerId   String?
  sentAt       DateTime?
  deliveredAt  DateTime?
  readAt       DateTime?
  responseAt   DateTime?
  errorMessage String?
  retryCount   Int                  @default(0)
  maxRetries   Int                  @default(3)
  providerName String?
  cost         Float?               @default(0)
  metadata     Json?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  company      Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customer     Customer             @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId, createdAt])
  @@index([companyId, status])
  @@map("communication_logs")
}

model MessageTemplate {
  id          String               @id @default(uuid())
  companyId   String
  name        String
  type        MessageType
  channel     CommunicationChannel
  language    String               @default("en")
  subject     String?
  htmlContent String?
  textContent String
  variables   String[]             @default([])
  isActive    Boolean              @default(true)
  isDefault   Boolean              @default(false)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  company     Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, type, channel, isDefault])
  @@map("message_templates")
}

enum UserRole {
  ADMIN
  USER
  VIEWER
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  PARTIALLY_PAID
  OVERDUE
  CANCELLED
  GENERATED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CHEQUE
  UPI
  CARD
  DIGITAL_WALLET
  CRYPTOCURRENCY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum BillingFrequency {
  MONTHLY
  QUARTERLY
  HALF_YEARLY
  ANNUALLY
}

enum ContractStatus {
  ACTIVE
  PAUSED
  EXPIRED
  CANCELLED
}

enum ComplianceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum DocumentCategory {
  INVOICE
  AGREEMENT
  COMPLIANCE
  FINANCIAL
  OTHER
}

enum CommunicationType {
  EMAIL
  PHONE
  WHATSAPP
  MEETING
}

enum ComplianceType {
  ROC_FILING
  BOARD_MEETING
  AGM
  EGM
  AUDIT
  TAX_FILING
  REGULATORY
  STATUTORY
  PERIODIC
  ONE_TIME
}

enum ComplianceCategory {
  CORPORATE_GOVERNANCE
  REGULATORY_COMPLIANCE
  TAX_COMPLIANCE
  AUDIT_COMPLIANCE
  BOARD_MATTERS
  SHAREHOLDER_MATTERS
  SECRETARIAL_COMPLIANCE
  ANNUAL_COMPLIANCE
  QUARTERLY_COMPLIANCE
  MONTHLY_COMPLIANCE
}

enum ComplianceFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  HALF_YEARLY
  ANNUALLY
  BI_ANNUALLY
  ON_DEMAND
}

enum ActivityType {
  CREATED
  UPDATED
  COMPLETED
  POSTPONED
  ESCALATED
  ASSIGNED
  DOCUMENT_UPLOADED
  REMINDER_SENT
  COMMENT_ADDED
  STATUS_CHANGED
}

enum AlertType {
  UPCOMING_DEADLINE
  OVERDUE_ITEM
  CRITICAL_ALERT
  REMINDER
  ESCALATION
  COMPLETION_REQUIRED
}

enum EmailProvider {
  SMTP
  SENDGRID
  RESEND
  MAILGUN
  AWS_SES
}

enum WhatsAppProvider {
  WHATSAPP_BUSINESS_API
  TWILIO
  MESSAGEBIRD
  GUPSHUP
}

enum CommunicationChannel {
  EMAIL
  WHATSAPP
  SMS
  VOICE
}

enum ReminderFrequency {
  DAILY
  WEEKLY
  BI_WEEKLY
  MONTHLY
  CUSTOM
}

enum DeliveryStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
  BOUNCED
  PARTIALLY_FAILED
}

enum MessageType {
  INVOICE
  PAYMENT_REMINDER
  COMPLIANCE_REMINDER
  WELCOME
  GENERAL_UPDATE
  URGENT_NOTICE
  DOCUMENT_REQUEST
  THANK_YOU
}
