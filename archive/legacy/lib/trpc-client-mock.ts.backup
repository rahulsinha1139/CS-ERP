/**
 * tRPC Client Configuration
 * Temporary simplified implementation for build testing
 */

// Temporary mock API for build testing
export const api = {
  customer: {
    getAll: {
      useQuery: () => ({
        data: [{
          id: '1',
          name: 'Test Customer',
          email: 'customer@example.com',
          phone: '+91-9876543210',
          gstin: '27XXXXX1234X1Z1',
          stateCode: '27'
        }],
        isLoading: false,
        refetch: () => {}
      })
    }
  },
  service: {
    getTemplates: {
      useQuery: () => ({
        data: [{
          id: '1',
          name: 'Consultation Service',
          defaultRate: 1000,
          gstRate: 18,
          hsnSac: '998311'
        }],
        isLoading: false
      })
    }
  },
  company: {
    getCurrent: {
      useQuery: () => ({
        data: {
          id: '1',
          name: 'Your Company',
          address: '123 Business Street, City, State, 100001',
          gstin: '27XXXXX1234X1Z1',
          email: 'info@company.com',
          phone: '+91-9876543210',
          stateCode: '27'
        },
        isLoading: false
      })
    }
  },
  invoice: {
    create: {
      useMutation: (options?: any) => ({ mutate: (input?: any) => {}, isLoading: false })
    },
    update: {
      useMutation: (options?: any) => ({ mutate: (input?: any) => {}, isLoading: false })
    },
    getAll: {
      useQuery: (input?: any) => ({
        data: {
          invoices: [],
          pagination: { total: 0, page: 1, pages: 0, totalPages: 0, totalCount: 0 }
        },
        isLoading: false,
        refetch: () => {}
      })
    },
    getById: {
      useQuery: (input: any, options?: any) => ({
        data: {
          id: '1',
          number: 'INV-2024-001',
          issueDate: new Date(),
          dueDate: new Date(),
          status: 'DRAFT',
          grandTotal: 1000,
          subtotal: 850,
          cgstAmount: 75,
          sgstAmount: 75,
          igstAmount: 0,
          totalTax: 150,
          paidAmount: 0,
          customerId: '1',
          placeOfSupply: 'Mumbai',
          notes: 'Test invoice',
          customer: {
            id: '1',
            name: 'Test Customer',
            email: 'test@example.com',
            gstin: '27XXXXX1234X1Z1',
            phone: '+91-9876543210'
          },
          lines: [{
            description: 'Test Service',
            quantity: 1,
            rate: 850,
            gstRate: 18,
            amount: 850,
            hsnSac: '998311'
          }]
        },
        isLoading: false
      })
    },
    getStats: {
      useQuery: (input?: any) => ({
        data: {
          totalInvoices: 0,
          totalRevenue: 0,
          paidInvoices: 0,
          pendingInvoices: 0,
          overdueInvoices: 0,
          averageInvoiceValue: 0,
          outstandingAmount: 0,
          monthlyRevenue: 0
        },
        isLoading: false
      })
    },
    send: {
      useMutation: (options?: any) => ({ mutate: (input?: any) => {}, mutateAsync: async (input?: any) => {}, isLoading: false })
    },
    delete: {
      useMutation: (options?: any) => ({ mutate: (input?: any) => {}, isLoading: false })
    },
    getUnpaid: {
      useQuery: (input?: any) => ({ data: [], isLoading: false })
    },
    getOverdue: {
      useQuery: (input?: any) => ({ data: [], isLoading: false })
    }
  },
  payment: {
    record: {
      useMutation: (options?: any) => ({ mutate: (input?: any) => {}, isLoading: false })
    },
    getAll: {
      useQuery: (input?: any) => ({ data: [], isLoading: false, refetch: () => {} })
    },
    getStats: {
      useQuery: (input?: any) => ({
        data: {
          totalPayments: 0,
          totalAmount: 0,
          pendingPayments: 0,
          recentPayments: 0,
          averagePaymentValue: 0,
          monthlyTotal: 0,
          totalReceived: 0,
          receivedCount: 0,
          partialPayments: 0,
          pendingAmount: 0,
          outstanding: 0,
          outstandingCount: 0,
          averageDays: 0,
          growthRate: 0,
          thisMonth: 0
        },
        isLoading: false
      })
    },
    getRecent: {
      useQuery: (input?: any) => ({ data: [], isLoading: false })
    }
  },
  withTRPC: (component: any) => component
};